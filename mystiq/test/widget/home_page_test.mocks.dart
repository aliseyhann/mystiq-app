// Mocks generated by Mockito 5.4.4 from annotations
// in mystiq_fortune_app/test/widget/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:mongo_dart/mongo_dart.dart' as _i2;
import 'package:mongo_dart/src/database/commands/administration_commands/drop_command/drop_options.dart'
    as _i12;
import 'package:mongo_dart/src/database/commands/administration_commands/drop_database_command/drop_database_options.dart'
    as _i9;
import 'package:mongo_dart/src/database/commands/administration_commands/list_collections_command/list_collections_options.dart'
    as _i11;
import 'package:mongo_dart/src/database/commands/aggregation_commands/count/count_options.dart'
    as _i15;
import 'package:mongo_dart/src/database/commands/aggregation_commands/count/count_result.dart'
    as _i6;
import 'package:mongo_dart/src/database/commands/aggregation_commands/distinct/distinct_options.dart'
    as _i14;
import 'package:mongo_dart/src/database/commands/aggregation_commands/distinct/distinct_result.dart'
    as _i4;
import 'package:mongo_dart/src/database/commands/operation.dart' as _i3;
import 'package:mongo_dart/src/database/cursor/modern_cursor.dart' as _i5;
import 'package:mongo_dart/src/database/message/mongo_modern_message.dart'
    as _i8;
import 'package:mongo_dart_query/mongo_dart_query.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeState_0 extends _i1.SmartFake implements _i2.State {
  _FakeState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReadPreference_1 extends _i1.SmartFake
    implements _i3.ReadPreference {
  _FakeReadPreference_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnection_2 extends _i1.SmartFake implements _i2.Connection {
  _FakeConnection_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDbCollection_3 extends _i1.SmartFake implements _i2.DbCollection {
  _FakeDbCollection_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMongoReplyMessage_4 extends _i1.SmartFake
    implements _i2.MongoReplyMessage {
  _FakeMongoReplyMessage_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDb_5 extends _i1.SmartFake implements _i2.Db {
  _FakeDb_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCursor_6 extends _i1.SmartFake implements _i2.Cursor {
  _FakeCursor_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteResult_7 extends _i1.SmartFake implements _i3.WriteResult {
  _FakeWriteResult_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBulkWriteResult_8 extends _i1.SmartFake
    implements _i3.BulkWriteResult {
  _FakeBulkWriteResult_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFindAndModifyResult_9 extends _i1.SmartFake
    implements _i3.FindAndModifyResult {
  _FakeFindAndModifyResult_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDistinctResult_10 extends _i1.SmartFake
    implements _i4.DistinctResult {
  _FakeDistinctResult_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeModernCursor_11 extends _i1.SmartFake implements _i5.ModernCursor {
  _FakeModernCursor_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCountResult_12 extends _i1.SmartFake implements _i6.CountResult {
  _FakeCountResult_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Db].
///
/// See the documentation for Mockito's code generation for more information.
class MockDb extends _i1.Mock implements _i2.Db {
  MockDb() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.State get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.State);

  @override
  set state(_i2.State? _state) => super.noSuchMethod(
        Invocation.setter(
          #state,
          _state,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set databaseName(String? _databaseName) => super.noSuchMethod(
        Invocation.setter(
          #databaseName,
          _databaseName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set authSourceDb(_i2.Db? _authSourceDb) => super.noSuchMethod(
        Invocation.setter(
          #authSourceDb,
          _authSourceDb,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ReadPreference get readPreference => (super.noSuchMethod(
        Invocation.getter(#readPreference),
        returnValue: _FakeReadPreference_1(
          this,
          Invocation.getter(#readPreference),
        ),
      ) as _i3.ReadPreference);

  @override
  set readPreference(_i3.ReadPreference? _readPreference) => super.noSuchMethod(
        Invocation.setter(
          #readPreference,
          _readPreference,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Connection get masterConnection => (super.noSuchMethod(
        Invocation.getter(#masterConnection),
        returnValue: _FakeConnection_2(
          this,
          Invocation.getter(#masterConnection),
        ),
      ) as _i2.Connection);

  @override
  _i2.Connection get masterConnectionAnyState => (super.noSuchMethod(
        Invocation.getter(#masterConnectionAnyState),
        returnValue: _FakeConnection_2(
          this,
          Invocation.getter(#masterConnectionAnyState),
        ),
      ) as _i2.Connection);

  @override
  List<String> get uriList => (super.noSuchMethod(
        Invocation.getter(#uriList),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  void selectAuthenticationMechanism(String? authenticationSchemeName) =>
      super.noSuchMethod(
        Invocation.method(
          #selectAuthenticationMechanism,
          [authenticationSchemeName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.DbCollection collection(String? collectionName) => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionName],
        ),
        returnValue: _FakeDbCollection_3(
          this,
          Invocation.method(
            #collection,
            [collectionName],
          ),
        ),
      ) as _i2.DbCollection);

  @override
  _i7.Future<_i2.MongoReplyMessage> queryMessage(
    _i2.MongoMessage? queryMessage, {
    _i2.Connection? connection,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryMessage,
          [queryMessage],
          {#connection: connection},
        ),
        returnValue:
            _i7.Future<_i2.MongoReplyMessage>.value(_FakeMongoReplyMessage_4(
          this,
          Invocation.method(
            #queryMessage,
            [queryMessage],
            {#connection: connection},
          ),
        )),
      ) as _i7.Future<_i2.MongoReplyMessage>);

  @override
  void executeMessage(
    _i2.MongoMessage? message,
    _i2.WriteConcern? writeConcern, {
    _i2.Connection? connection,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #executeMessage,
          [
            message,
            writeConcern,
          ],
          {#connection: connection},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<Map<String, Object?>> executeModernMessage(
    _i8.MongoModernMessage? message, {
    _i2.Connection? connection,
    bool? skipStateCheck = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeModernMessage,
          [message],
          {
            #connection: connection,
            #skipStateCheck: skipStateCheck,
          },
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);

  @override
  _i7.Future<dynamic> open({
    _i2.WriteConcern? writeConcern = _i2.WriteConcern.acknowledged,
    bool? secure = false,
    bool? tlsAllowInvalidCertificates = false,
    String? tlsCAFile,
    String? tlsCertificateKeyFile,
    String? tlsCertificateKeyFilePassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {
            #writeConcern: writeConcern,
            #secure: secure,
            #tlsAllowInvalidCertificates: tlsAllowInvalidCertificates,
            #tlsCAFile: tlsCAFile,
            #tlsCertificateKeyFile: tlsCertificateKeyFile,
            #tlsCertificateKeyFilePassword: tlsCertificateKeyFilePassword,
          },
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<Map<String, dynamic>> executeDbCommand(
    _i2.MongoMessage? message, {
    _i2.Connection? connection,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeDbCommand,
          [message],
          {#connection: connection},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  bool documentIsNotAnError(dynamic firstRepliedDocument) =>
      (super.noSuchMethod(
        Invocation.method(
          #documentIsNotAnError,
          [firstRepliedDocument],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<bool> dropCollection(String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #dropCollection,
          [collectionName],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<dynamic> drop() => (super.noSuchMethod(
        Invocation.method(
          #drop,
          [],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<Map<String, dynamic>> removeFromCollection(
    String? collectionName, [
    Map<String, dynamic>? selector = const {},
    _i2.WriteConcern? writeConcern,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCollection,
          [
            collectionName,
            selector,
            writeConcern,
          ],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> getLastError(
          [_i2.WriteConcern? writeConcern]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastError,
          [writeConcern],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> getNonce({_i2.Connection? connection}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNonce,
          [],
          {#connection: connection},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> getBuildInfo({_i2.Connection? connection}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBuildInfo,
          [],
          {#connection: connection},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> isMaster({_i2.Connection? connection}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isMaster,
          [],
          {#connection: connection},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> wait() => (super.noSuchMethod(
        Invocation.method(
          #wait,
          [],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<List<dynamic>> listDatabases() => (super.noSuchMethod(
        Invocation.method(
          #listDatabases,
          [],
        ),
        returnValue: _i7.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i7.Future<List<dynamic>>);

  @override
  _i7.Stream<Map<String, dynamic>> collectionsInfoCursor(
          [String? collectionName]) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionsInfoCursor,
          [collectionName],
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Future<List<String?>> listCollections() => (super.noSuchMethod(
        Invocation.method(
          #listCollections,
          [],
        ),
        returnValue: _i7.Future<List<String?>>.value(<String?>[]),
      ) as _i7.Future<List<String?>>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getCollectionInfos(
          [Map<String, dynamic>? filter = const {}]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollectionInfos,
          [filter],
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<List<String?>> getCollectionNames(
          [Map<String, dynamic>? filter = const {}]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollectionNames,
          [filter],
        ),
        returnValue: _i7.Future<List<String?>>.value(<String?>[]),
      ) as _i7.Future<List<String?>>);

  @override
  _i7.Future<bool> authenticate(
    String? userName,
    String? password, {
    _i2.Connection? connection,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [
            userName,
            password,
          ],
          {#connection: connection},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<List<dynamic>> indexInformation([String? collectionName]) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexInformation,
          [collectionName],
        ),
        returnValue: _i7.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i7.Future<List<dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> createIndex(
    String? collectionName, {
    String? key,
    Map<String, dynamic>? keys,
    bool? unique,
    bool? sparse,
    bool? background,
    bool? dropDups,
    Map<String, dynamic>? partialFilterExpression,
    String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createIndex,
          [collectionName],
          {
            #key: key,
            #keys: keys,
            #unique: unique,
            #sparse: sparse,
            #background: background,
            #dropDups: dropDups,
            #partialFilterExpression: partialFilterExpression,
            #name: name,
          },
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<dynamic> ensureIndex(
    String? collectionName, {
    String? key,
    Map<String, dynamic>? keys,
    bool? unique,
    bool? sparse,
    bool? background,
    bool? dropDups,
    Map<String, dynamic>? partialFilterExpression,
    String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #ensureIndex,
          [collectionName],
          {
            #key: key,
            #keys: keys,
            #unique: unique,
            #sparse: sparse,
            #background: background,
            #dropDups: dropDups,
            #partialFilterExpression: partialFilterExpression,
            #name: name,
          },
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<Map<String, Object?>> modernDropDatabase({
    _i9.DropDatabaseOptions? dropOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernDropDatabase,
          [],
          {
            #dropOptions: dropOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);

  @override
  _i7.Future<Map<String, Object?>> serverStatus(
          {Map<String, Object>? options}) =>
      (super.noSuchMethod(
        Invocation.method(
          #serverStatus,
          [],
          {#options: options},
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);

  @override
  _i7.Future<Map<String, Object?>> createCollection(
    String? name, {
    _i3.CreateCollectionOptions? createCollectionOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCollection,
          [name],
          {
            #createCollectionOptions: createCollectionOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);

  @override
  _i7.Stream<Map<String, dynamic>> modernListCollections({
    _i10.SelectorBuilder? selector,
    Map<String, Object?>? filter,
    _i11.ListCollectionsOptions? findOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernListCollections,
          [],
          {
            #selector: selector,
            #filter: filter,
            #findOptions: findOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, Object?>> createView(
    String? view,
    String? source,
    List<dynamic>? pipeline, {
    _i3.CreateViewOptions? createViewOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createView,
          [
            view,
            source,
            pipeline,
          ],
          {
            #createViewOptions: createViewOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);

  @override
  _i7.Future<Map<String, Object?>> modernDrop(
    String? collectionNAme, {
    _i12.DropOptions? dropOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernDrop,
          [collectionNAme],
          {
            #dropOptions: dropOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);

  @override
  _i7.Stream<Map<String, dynamic>> aggregate(
    List<Map<String, Object>>? pipeline, {
    bool? explain,
    Map<String, Object>? cursor,
    String? hint,
    Map<String, Object>? hintDocument,
    _i3.AggregateOptions? aggregateOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [pipeline],
          {
            #explain: explain,
            #cursor: cursor,
            #hint: hint,
            #hintDocument: hintDocument,
            #aggregateOptions: aggregateOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, Object?>> runCommand(Map<String, Object>? command) =>
      (super.noSuchMethod(
        Invocation.method(
          #runCommand,
          [command],
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);

  @override
  _i7.Future<Map<String, Object?>> pingCommand() => (super.noSuchMethod(
        Invocation.method(
          #pingCommand,
          [],
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);
}

/// A class which mocks [DbCollection].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbCollection extends _i1.Mock implements _i2.DbCollection {
  MockDbCollection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Db get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDb_5(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Db);

  @override
  set db(_i2.Db? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get collectionName => (super.noSuchMethod(
        Invocation.getter(#collectionName),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#collectionName),
        ),
      ) as String);

  @override
  set collectionName(String? _collectionName) => super.noSuchMethod(
        Invocation.setter(
          #collectionName,
          _collectionName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ReadPreference get readPreference => (super.noSuchMethod(
        Invocation.getter(#readPreference),
        returnValue: _FakeReadPreference_1(
          this,
          Invocation.getter(#readPreference),
        ),
      ) as _i3.ReadPreference);

  @override
  set readPreference(_i3.ReadPreference? _readPreference) => super.noSuchMethod(
        Invocation.setter(
          #readPreference,
          _readPreference,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String fullName() => (super.noSuchMethod(
        Invocation.method(
          #fullName,
          [],
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #fullName,
            [],
          ),
        ),
      ) as String);

  @override
  _i7.Future<Map<String, dynamic>> save(
    Map<String, dynamic>? document, {
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [document],
          {#writeConcern: writeConcern},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> insertAll(
    List<Map<String, dynamic>>? documents, {
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [documents],
          {#writeConcern: writeConcern},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> legacyInsertAll(
    List<Map<String, dynamic>>? documents, {
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyInsertAll,
          [documents],
          {#writeConcern: writeConcern},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> update(
    dynamic selector,
    dynamic document, {
    bool? upsert = false,
    bool? multiUpdate = false,
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            selector,
            document,
          ],
          {
            #upsert: upsert,
            #multiUpdate: multiUpdate,
            #writeConcern: writeConcern,
          },
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> legacyUpdate(
    dynamic selector,
    dynamic document, {
    bool? upsert = false,
    bool? multiUpdate = false,
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyUpdate,
          [
            selector,
            document,
          ],
          {
            #upsert: upsert,
            #multiUpdate: multiUpdate,
            #writeConcern: writeConcern,
          },
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Stream<Map<String, dynamic>> find([dynamic selector]) =>
      (super.noSuchMethod(
        Invocation.method(
          #find,
          [selector],
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Stream<Map<String, dynamic>> legacyFind([dynamic selector]) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyFind,
          [selector],
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i2.Cursor createCursor([dynamic selector]) => (super.noSuchMethod(
        Invocation.method(
          #createCursor,
          [selector],
        ),
        returnValue: _FakeCursor_6(
          this,
          Invocation.method(
            #createCursor,
            [selector],
          ),
        ),
      ) as _i2.Cursor);

  @override
  _i7.Future<Map<String, dynamic>?> findOne([dynamic selector]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findOne,
          [selector],
        ),
        returnValue: _i7.Future<Map<String, dynamic>?>.value(),
      ) as _i7.Future<Map<String, dynamic>?>);

  @override
  _i7.Future<Map<String, dynamic>?> legacyFindOne([dynamic selector]) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyFindOne,
          [selector],
        ),
        returnValue: _i7.Future<Map<String, dynamic>?>.value(),
      ) as _i7.Future<Map<String, dynamic>?>);

  @override
  _i7.Future<Map<String, dynamic>?> findAndModify({
    dynamic query,
    dynamic sort,
    bool? remove,
    dynamic update,
    bool? returnNew,
    dynamic fields,
    bool? upsert,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAndModify,
          [],
          {
            #query: query,
            #sort: sort,
            #remove: remove,
            #update: update,
            #returnNew: returnNew,
            #fields: fields,
            #upsert: upsert,
          },
        ),
        returnValue: _i7.Future<Map<String, dynamic>?>.value(),
      ) as _i7.Future<Map<String, dynamic>?>);

  @override
  _i7.Future<Map<String, dynamic>?> legacyFindAndModify({
    dynamic query,
    dynamic sort,
    bool? remove,
    dynamic update,
    bool? returnNew,
    dynamic fields,
    bool? upsert,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyFindAndModify,
          [],
          {
            #query: query,
            #sort: sort,
            #remove: remove,
            #update: update,
            #returnNew: returnNew,
            #fields: fields,
            #upsert: upsert,
          },
        ),
        returnValue: _i7.Future<Map<String, dynamic>?>.value(),
      ) as _i7.Future<Map<String, dynamic>?>);

  @override
  _i7.Future<bool> drop() => (super.noSuchMethod(
        Invocation.method(
          #drop,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<Map<String, dynamic>> remove(
    dynamic selector, {
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #remove,
          [selector],
          {#writeConcern: writeConcern},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> legacyRemove(
    dynamic selector, {
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyRemove,
          [selector],
          {#writeConcern: writeConcern},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<int> count([dynamic selector]) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [selector],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<int> legacyCount([dynamic selector]) => (super.noSuchMethod(
        Invocation.method(
          #legacyCount,
          [selector],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<Map<String, dynamic>> distinct(
    String? field, [
    dynamic selector,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [
            field,
            selector,
          ],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> legacyDistinct(
    String? field, [
    dynamic selector,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyDistinct,
          [
            field,
            selector,
          ],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> aggregate(
    List<dynamic>? pipeline, {
    bool? allowDiskUse = false,
    Map<String, Object>? cursor,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [pipeline],
          {
            #allowDiskUse: allowDiskUse,
            #cursor: cursor,
          },
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Stream<Map<String, dynamic>> aggregateToStream(
    List<Map<String, Object>>? pipeline, {
    Map<String, Object>? cursorOptions = const {},
    bool? allowDiskUse = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregateToStream,
          [pipeline],
          {
            #cursorOptions: cursorOptions,
            #allowDiskUse: allowDiskUse,
          },
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Stream<Map<String, dynamic>> legacyAggregateToStream(
    List<dynamic>? pipeline, {
    Map<String, dynamic>? cursorOptions = const {},
    bool? allowDiskUse = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyAggregateToStream,
          [pipeline],
          {
            #cursorOptions: cursorOptions,
            #allowDiskUse: allowDiskUse,
          },
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> insert(
    Map<String, dynamic>? document, {
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [document],
          {#writeConcern: writeConcern},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> legacyInsert(
    Map<String, dynamic>? document, {
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #legacyInsert,
          [document],
          {#writeConcern: writeConcern},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getIndexes() => (super.noSuchMethod(
        Invocation.method(
          #getIndexes,
          [],
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<Map<String, dynamic>> createIndex({
    String? key,
    Map<String, dynamic>? keys,
    bool? unique,
    bool? sparse,
    bool? background,
    bool? dropDups,
    Map<String, dynamic>? partialFilterExpression,
    String? name,
    bool? modernReply,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createIndex,
          [],
          {
            #key: key,
            #keys: keys,
            #unique: unique,
            #sparse: sparse,
            #background: background,
            #dropDups: dropDups,
            #partialFilterExpression: partialFilterExpression,
            #name: name,
            #modernReply: modernReply,
          },
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Stream<Map<String, dynamic>> listIndexes({
    int? batchSize,
    String? comment,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listIndexes,
          [],
          {
            #batchSize: batchSize,
            #comment: comment,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> dropIndexes(
    Object? index, {
    _i2.WriteConcern? writeConcern,
    String? comment,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dropIndexes,
          [index],
          {
            #writeConcern: writeConcern,
            #comment: comment,
            #rawOptions: rawOptions,
          },
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<_i3.WriteResult> insertOne(
    Map<String, dynamic>? document, {
    _i2.WriteConcern? writeConcern,
    bool? bypassDocumentValidation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOne,
          [document],
          {
            #writeConcern: writeConcern,
            #bypassDocumentValidation: bypassDocumentValidation,
          },
        ),
        returnValue: _i7.Future<_i3.WriteResult>.value(_FakeWriteResult_7(
          this,
          Invocation.method(
            #insertOne,
            [document],
            {
              #writeConcern: writeConcern,
              #bypassDocumentValidation: bypassDocumentValidation,
            },
          ),
        )),
      ) as _i7.Future<_i3.WriteResult>);

  @override
  _i7.Future<_i3.BulkWriteResult> insertMany(
    List<Map<String, dynamic>>? documents, {
    _i2.WriteConcern? writeConcern,
    bool? ordered,
    bool? bypassDocumentValidation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertMany,
          [documents],
          {
            #writeConcern: writeConcern,
            #ordered: ordered,
            #bypassDocumentValidation: bypassDocumentValidation,
          },
        ),
        returnValue:
            _i7.Future<_i3.BulkWriteResult>.value(_FakeBulkWriteResult_8(
          this,
          Invocation.method(
            #insertMany,
            [documents],
            {
              #writeConcern: writeConcern,
              #ordered: ordered,
              #bypassDocumentValidation: bypassDocumentValidation,
            },
          ),
        )),
      ) as _i7.Future<_i3.BulkWriteResult>);

  @override
  _i7.Future<_i3.WriteResult> deleteOne(
    dynamic selector, {
    _i2.WriteConcern? writeConcern,
    _i3.CollationOptions? collation,
    String? hint,
    Map<String, Object>? hintDocument,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOne,
          [selector],
          {
            #writeConcern: writeConcern,
            #collation: collation,
            #hint: hint,
            #hintDocument: hintDocument,
          },
        ),
        returnValue: _i7.Future<_i3.WriteResult>.value(_FakeWriteResult_7(
          this,
          Invocation.method(
            #deleteOne,
            [selector],
            {
              #writeConcern: writeConcern,
              #collation: collation,
              #hint: hint,
              #hintDocument: hintDocument,
            },
          ),
        )),
      ) as _i7.Future<_i3.WriteResult>);

  @override
  _i7.Future<_i3.WriteResult> deleteMany(
    dynamic selector, {
    _i2.WriteConcern? writeConcern,
    _i3.CollationOptions? collation,
    String? hint,
    Map<String, Object>? hintDocument,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMany,
          [selector],
          {
            #writeConcern: writeConcern,
            #collation: collation,
            #hint: hint,
            #hintDocument: hintDocument,
          },
        ),
        returnValue: _i7.Future<_i3.WriteResult>.value(_FakeWriteResult_7(
          this,
          Invocation.method(
            #deleteMany,
            [selector],
            {
              #writeConcern: writeConcern,
              #collation: collation,
              #hint: hint,
              #hintDocument: hintDocument,
            },
          ),
        )),
      ) as _i7.Future<_i3.WriteResult>);

  @override
  _i7.Future<Map<String, dynamic>> modernUpdate(
    dynamic selector,
    dynamic update, {
    bool? upsert,
    bool? multi,
    _i2.WriteConcern? writeConcern,
    _i3.CollationOptions? collation,
    List<dynamic>? arrayFilters,
    String? hint,
    Map<String, Object>? hintDocument,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernUpdate,
          [
            selector,
            update,
          ],
          {
            #upsert: upsert,
            #multi: multi,
            #writeConcern: writeConcern,
            #collation: collation,
            #arrayFilters: arrayFilters,
            #hint: hint,
            #hintDocument: hintDocument,
          },
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<_i3.WriteResult> replaceOne(
    dynamic selector,
    Map<String, dynamic>? update, {
    bool? upsert,
    _i2.WriteConcern? writeConcern,
    _i3.CollationOptions? collation,
    String? hint,
    Map<String, Object>? hintDocument,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceOne,
          [
            selector,
            update,
          ],
          {
            #upsert: upsert,
            #writeConcern: writeConcern,
            #collation: collation,
            #hint: hint,
            #hintDocument: hintDocument,
          },
        ),
        returnValue: _i7.Future<_i3.WriteResult>.value(_FakeWriteResult_7(
          this,
          Invocation.method(
            #replaceOne,
            [
              selector,
              update,
            ],
            {
              #upsert: upsert,
              #writeConcern: writeConcern,
              #collation: collation,
              #hint: hint,
              #hintDocument: hintDocument,
            },
          ),
        )),
      ) as _i7.Future<_i3.WriteResult>);

  @override
  _i7.Future<_i3.WriteResult> updateOne(
    dynamic selector,
    dynamic update, {
    bool? upsert,
    _i2.WriteConcern? writeConcern,
    _i3.CollationOptions? collation,
    List<dynamic>? arrayFilters,
    String? hint,
    Map<String, Object>? hintDocument,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOne,
          [
            selector,
            update,
          ],
          {
            #upsert: upsert,
            #writeConcern: writeConcern,
            #collation: collation,
            #arrayFilters: arrayFilters,
            #hint: hint,
            #hintDocument: hintDocument,
          },
        ),
        returnValue: _i7.Future<_i3.WriteResult>.value(_FakeWriteResult_7(
          this,
          Invocation.method(
            #updateOne,
            [
              selector,
              update,
            ],
            {
              #upsert: upsert,
              #writeConcern: writeConcern,
              #collation: collation,
              #arrayFilters: arrayFilters,
              #hint: hint,
              #hintDocument: hintDocument,
            },
          ),
        )),
      ) as _i7.Future<_i3.WriteResult>);

  @override
  _i7.Future<_i3.WriteResult> updateMany(
    dynamic selector,
    dynamic update, {
    bool? upsert,
    _i2.WriteConcern? writeConcern,
    _i3.CollationOptions? collation,
    List<dynamic>? arrayFilters,
    String? hint,
    Map<String, Object>? hintDocument,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMany,
          [
            selector,
            update,
          ],
          {
            #upsert: upsert,
            #writeConcern: writeConcern,
            #collation: collation,
            #arrayFilters: arrayFilters,
            #hint: hint,
            #hintDocument: hintDocument,
          },
        ),
        returnValue: _i7.Future<_i3.WriteResult>.value(_FakeWriteResult_7(
          this,
          Invocation.method(
            #updateMany,
            [
              selector,
              update,
            ],
            {
              #upsert: upsert,
              #writeConcern: writeConcern,
              #collation: collation,
              #arrayFilters: arrayFilters,
              #hint: hint,
              #hintDocument: hintDocument,
            },
          ),
        )),
      ) as _i7.Future<_i3.WriteResult>);

  @override
  _i7.Future<_i3.FindAndModifyResult> modernFindAndModify({
    dynamic query,
    dynamic sort,
    bool? remove,
    dynamic update,
    bool? returnNew,
    dynamic fields,
    bool? upsert,
    List<dynamic>? arrayFilters,
    String? hint,
    Map<String, Object>? hintDocument,
    _i3.FindAndModifyOptions? findAndModifyOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernFindAndModify,
          [],
          {
            #query: query,
            #sort: sort,
            #remove: remove,
            #update: update,
            #returnNew: returnNew,
            #fields: fields,
            #upsert: upsert,
            #arrayFilters: arrayFilters,
            #hint: hint,
            #hintDocument: hintDocument,
            #findAndModifyOptions: findAndModifyOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Future<_i3.FindAndModifyResult>.value(
            _FakeFindAndModifyResult_9(
          this,
          Invocation.method(
            #modernFindAndModify,
            [],
            {
              #query: query,
              #sort: sort,
              #remove: remove,
              #update: update,
              #returnNew: returnNew,
              #fields: fields,
              #upsert: upsert,
              #arrayFilters: arrayFilters,
              #hint: hint,
              #hintDocument: hintDocument,
              #findAndModifyOptions: findAndModifyOptions,
              #rawOptions: rawOptions,
            },
          ),
        )),
      ) as _i7.Future<_i3.FindAndModifyResult>);

  @override
  _i7.Stream<Map<String, dynamic>> modernFind({
    _i10.SelectorBuilder? selector,
    Map<String, Object?>? filter,
    Map<String, Object>? sort,
    Map<String, Object>? projection,
    String? hint,
    Map<String, Object>? hintDocument,
    int? skip,
    int? limit,
    _i3.FindOptions? findOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernFind,
          [],
          {
            #selector: selector,
            #filter: filter,
            #sort: sort,
            #projection: projection,
            #hint: hint,
            #hintDocument: hintDocument,
            #skip: skip,
            #limit: limit,
            #findOptions: findOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>?> modernFindOne({
    _i10.SelectorBuilder? selector,
    Map<String, Object?>? filter,
    Map<String, Object>? sort,
    Map<String, Object>? projection,
    String? hint,
    Map<String, Object>? hintDocument,
    int? skip,
    _i3.FindOptions? findOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernFindOne,
          [],
          {
            #selector: selector,
            #filter: filter,
            #sort: sort,
            #projection: projection,
            #hint: hint,
            #hintDocument: hintDocument,
            #skip: skip,
            #findOptions: findOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Future<Map<String, dynamic>?>.value(),
      ) as _i7.Future<Map<String, dynamic>?>);

  @override
  _i7.Future<_i4.DistinctResult> modernDistinct(
    String? field, {
    dynamic query,
    _i14.DistinctOptions? distinctOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernDistinct,
          [field],
          {
            #query: query,
            #distinctOptions: distinctOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue:
            _i7.Future<_i4.DistinctResult>.value(_FakeDistinctResult_10(
          this,
          Invocation.method(
            #modernDistinct,
            [field],
            {
              #query: query,
              #distinctOptions: distinctOptions,
              #rawOptions: rawOptions,
            },
          ),
        )),
      ) as _i7.Future<_i4.DistinctResult>);

  @override
  _i7.Future<Map<String, Object?>> modernDistinctMap(
    String? field, {
    dynamic query,
    _i14.DistinctOptions? distinctOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernDistinctMap,
          [field],
          {
            #query: query,
            #distinctOptions: distinctOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue:
            _i7.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i7.Future<Map<String, Object?>>);

  @override
  _i7.Stream<Map<String, dynamic>> modernAggregate(
    dynamic pipeline, {
    bool? explain,
    Map<String, Object>? cursor,
    String? hint,
    Map<String, Object>? hintDocument,
    _i3.AggregateOptions? aggregateOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernAggregate,
          [pipeline],
          {
            #explain: explain,
            #cursor: cursor,
            #hint: hint,
            #hintDocument: hintDocument,
            #aggregateOptions: aggregateOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i5.ModernCursor modernAggregateCursor(
    dynamic pipeline, {
    bool? explain,
    Map<String, Object>? cursor,
    String? hint,
    Map<String, Object>? hintDocument,
    _i3.AggregateOptions? aggregateOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernAggregateCursor,
          [pipeline],
          {
            #explain: explain,
            #cursor: cursor,
            #hint: hint,
            #hintDocument: hintDocument,
            #aggregateOptions: aggregateOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _FakeModernCursor_11(
          this,
          Invocation.method(
            #modernAggregateCursor,
            [pipeline],
            {
              #explain: explain,
              #cursor: cursor,
              #hint: hint,
              #hintDocument: hintDocument,
              #aggregateOptions: aggregateOptions,
              #rawOptions: rawOptions,
            },
          ),
        ),
      ) as _i5.ModernCursor);

  @override
  _i7.Stream<dynamic> watch(
    Object? pipeline, {
    int? batchSize,
    String? hint,
    Map<String, Object>? hintDocument,
    _i3.ChangeStreamOptions? changeStreamOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [pipeline],
          {
            #batchSize: batchSize,
            #hint: hint,
            #hintDocument: hintDocument,
            #changeStreamOptions: changeStreamOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Stream<dynamic>.empty(),
      ) as _i7.Stream<dynamic>);

  @override
  _i5.ModernCursor watchCursor(
    Object? pipeline, {
    int? batchSize,
    String? hint,
    Map<String, Object>? hintDocument,
    _i3.ChangeStreamOptions? changeStreamOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchCursor,
          [pipeline],
          {
            #batchSize: batchSize,
            #hint: hint,
            #hintDocument: hintDocument,
            #changeStreamOptions: changeStreamOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _FakeModernCursor_11(
          this,
          Invocation.method(
            #watchCursor,
            [pipeline],
            {
              #batchSize: batchSize,
              #hint: hint,
              #hintDocument: hintDocument,
              #changeStreamOptions: changeStreamOptions,
              #rawOptions: rawOptions,
            },
          ),
        ),
      ) as _i5.ModernCursor);

  @override
  _i7.Future<_i3.BulkWriteResult> bulkWrite(
    List<Map<String, Object>>? documents, {
    bool? ordered = true,
    _i2.WriteConcern? writeConcern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #bulkWrite,
          [documents],
          {
            #ordered: ordered,
            #writeConcern: writeConcern,
          },
        ),
        returnValue:
            _i7.Future<_i3.BulkWriteResult>.value(_FakeBulkWriteResult_8(
          this,
          Invocation.method(
            #bulkWrite,
            [documents],
            {
              #ordered: ordered,
              #writeConcern: writeConcern,
            },
          ),
        )),
      ) as _i7.Future<_i3.BulkWriteResult>);

  @override
  _i7.Future<_i6.CountResult> modernCount({
    _i10.SelectorBuilder? selector,
    Map<String, Object?>? filter,
    int? limit,
    int? skip,
    _i3.CollationOptions? collation,
    String? hint,
    Map<String, Object>? hintDocument,
    _i15.CountOptions? countOptions,
    Map<String, Object>? rawOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modernCount,
          [],
          {
            #selector: selector,
            #filter: filter,
            #limit: limit,
            #skip: skip,
            #collation: collation,
            #hint: hint,
            #hintDocument: hintDocument,
            #countOptions: countOptions,
            #rawOptions: rawOptions,
          },
        ),
        returnValue: _i7.Future<_i6.CountResult>.value(_FakeCountResult_12(
          this,
          Invocation.method(
            #modernCount,
            [],
            {
              #selector: selector,
              #filter: filter,
              #limit: limit,
              #skip: skip,
              #collation: collation,
              #hint: hint,
              #hintDocument: hintDocument,
              #countOptions: countOptions,
              #rawOptions: rawOptions,
            },
          ),
        )),
      ) as _i7.Future<_i6.CountResult>);
}
